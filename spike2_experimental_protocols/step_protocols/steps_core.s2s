' ------------------------------------------------------------------------------
' STEPS - CORE SCRIPT USED BY ALL STEPS PROTOCOLS (REQUIRES SPIKE2 VERSION 10)
'
' Contains variables/functions that are shared by all steps protocols
' ------------------------------------------------------------------------------
' Define the parent directory all other paths will be relative to
const rootpath$ := "G:/Shared drives/Raymond Lab/Current Members/Brian Angeles/Temporary Spike2 scripts/RaymondLabCodeV2/spike2_experimental_protocols";
FilePathSet(rootpath$, 0);

' These files are the same for ALL EXPERIMENTAL protocols
#include "../utils/read_write_rig_params.s2s"
#include "../utils/sampling_window_config.s2s"
#include "../utils/unit_conversion_functions.s2s"

' Load rig-specific parameters from local-computer's registry
LoadRigParams();

' Drum stimulus parameters
var drumAmp := 10.0;  'In deg/s
var drumStepDelayTime := 0;  'In ms
var drumPosStepAmplitude := drumAmp;
var drumNegStepAmplitude := -drumAmp;
var drumSign := drumAmp / Abs(drumAmp);  'Sign of given drum amplitude

' Chair stimulus parameters
var chairAmp := 10.0;  'In deg/s
var chairStepDelayTime := 0;  'In ms
var chairPosStepAmplitude := chairAmp;
var chairNegStepAmplitude := -chairAmp;
var chairSign := chairAmp / Abs(chairAmp);  'Sign of given drum amplitude

' Step parameters
var stepRampTime := 25;  'In ms
var stepAmpTime := 600;  'In ms
var stepPauseTime := 500;  'In ms
var stepPeriod := (4.0*stepRampTime) + (2.0*stepAmpTime) + (2.0*stepPauseTime);  'In ms
var stepFreq := 1.0 / (stepPeriod/1000);  'Frequency converted to seconds

' driftFix correction scaling factors
var Kp := 1.0;  'Proportional error correction scaling

' ToolbarIdle% variables
var nBlocks%, blockList$[1];
var blockNum%;  'Counter which defines which block number is currently active
var blockFlag%;  'Flag which defines whether a block is actively running or not
var blockMarkers$;  'Provides the SampleKey commands for the currently active block
var runFlag%;  'Flag which denotes whether the experiment is activately running or not

'--------------------------------------------------------------------------------
' DRIFTFIX: Drift correction function for steps
'--------------------------------------------------------------------------------
' Checks if the motor is drifting and applies velocity correction if necessary
Func driftFix%()
    ' Initialize required variables
    var drumFirstTime, htpos_minID%, htpos_arr[Round(stepPeriod)];
    var chairFirstTime, hhpos_minID%, hhpos_arr[Round(stepPeriod)];
    var htpos_error, hhpos_error;
    ' Get the current sampling time
    var currentTime := MaxTime();
    ' Fill arrays with drum and chair position data over a step period from the current time
    ChanData(htpos_ch%, htpos_arr, currentTime-(stepPeriod/1000), currentTime, drumFirstTime);
    ChanData(hhpos_ch%, hhpos_arr, currentTime-(stepPeriod/1000), currentTime, chairFirstTime);
    ' Flip data with negative steps to be positive
    ArrMul(htpos_arr[], drumSign);
    ArrMul(hhpos_arr[], chairSign);
    ' Compute the minimum value of each array
    htpos_minID% := Round(Min(htpos_arr));
    hhpos_minID% := Round(Min(hhpos_arr));

    ' Set those minimum values as the error to be corrected (scaled via Kp factor)
    htpos_error := Kp * drumSign * htpos_arr[htpos_minID%];
    hhpos_error := Kp * chairSign * hhpos_arr[hhpos_minID%];

    ' Apply error correction to the drum and chair velocity commands
    drumVelocityOffset := drumVelocityOffsetInitial - htpos_error;
    drumPosStepAmplitude := drumAmp + drumVelocityOffset;
    drumNegStepAmplitude := -drumAmp + drumVelocityOffset;

    chairVelocityOffset := chairVelocityOffsetInitial - hhpos_error;
    chairPosStepAmplitude := chairAmp + chairVelocityOffset;
    chairNegStepAmplitude := -chairAmp + chairVelocityOffset;

    ' Update the sequencer variables with the corrected velocities
    SetSequencerValues();
    return 1;
End


'--------------------------------------------------------------------------------
' GENERAL TOOLBAR FUNCTIONS
'--------------------------------------------------------------------------------

' Function that opens a new sampling window
Func ToolbarNewFile%()
    WindowSetup();  'Sets up channels in the new sampling configuration window
    WindowVisible(3);  'Maximizes the new sampling window to fit the screen
    ToolbarEnable(-1, 1);  'Enables buttons that require a new sampling window
    ToolbarEnable(3, 0); 
    SetSequencerValues(); Yield();
    SampleStart(); Yield();
    SampleKey("R");  'Ensures that sequencer is set to its default configuration prior to sampling
    return 1;
End

' Function that defines what happens during idle times (in computer cycles) while actively sampling
Func ToolbarIdle%()
    ' Check whether a valid sampling view is currently running before continuing
    if ViewKind() <> 0 then
        return 1;
    endif;

    ' Check whether motors are drifting and apply correction if needed
    driftFix%();

    if runFlag% = 1 then  'Check whether the "Run Experiment" button was pressed
        blockFlag% := SampleSeqVar(1);  'Get the current blockFlag% value from the 1401 sequencer variable
        if blockFlag% = 0 then  'Check whether a block is not currently running
            if blockNum% > 0 then
                SampleKey(Right$(blockMarkers$, 1));  'Sends a lower-case keyboard command that defines the end of a block (useful only for analysis)
                PrintLog("Sample time: %.4f seconds | Block number: %d of %d | Block marker: %s\n", MaxTime(), blockNum%+1, nBlocks%, Right$(blockMarkers$,1));
            endif;        
            if blockNum% < nBlocks% then  'Check whether current block number is not greater than or equal to maximum number of blocks
                blockMarkers$ := blockList$[blockNum%];
                SampleKey(Left$(blockMarkers$, 1));  'Send SampleKey() command to the 1401 sequencer of the current block's letter marker
                'CursorNew(MaxTime());
                PrintLog("Sample time: %.4f seconds | Block number: %d of %d | Block marker: %s\n", MaxTime(), blockNum%+1, nBlocks%, Left$(blockMarkers$,1));
                blockNum% := blockNum% + 1;  'Increase the block number by one
            else
                runFlag% := 0;  'Set experiment flag to off
                SampleKey("R");  'Reset 1401 sequencer to initial state
                SampleKey("a");  'Sends a lower-case keyboard command that defines the end of the experiment (useful only for analysis)
                XRange();  'Zoom out to view entire experiement
                PrintLog("EXPERIMENT COMPLETE!\n\n");
            endif;
        endif;
    endif;
    
    return 1;
End

' Function that runs experiment based on parameters provided in experimental configuration window
Func ToolbarRunExpmt%()
    'CursorNew(MaxTime());
    SampleKey("A");
    SetSequencerValues();
    runFlag% := 1;
    return 1;
End

' Function that stops all stimuli, resets the sequencer to default, and quits out of the toolbar
Func ToolbarQuit%()
    SampleKey("R");
    SampleKey("a");
    SampleStop();
    PrintLog("MANUALLY QUIT!\n\n");
    return 0;
End