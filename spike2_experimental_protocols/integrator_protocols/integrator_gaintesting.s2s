' ------------------------------------------------------------------------------
' INTEGRATOR - NULL SEARCH EXPERIMENTAL PROTOCOL (REQUIRES SPIKE2 VERSION 10)
'
' Values for local (rig-specific) variables are stored in the system registry: 
' HKEY_CURRENT_USER\Software\CED\Spike2\RigParams
'
' NOTE: This script only works with motors in POSITION command mode
' 
' ------------------------------------------------------------------------------
'Set the sequencer file to use for the protocol
const sequencerFile$ := "integrator_protocols/integrator_gaintesting.pls";

' This file is the same for all STEP protocols
#include "integrator_core.s2s"

' Protocol-specific modifications to core parameters
gapDur := 5.0;
testBlockDuration := 300.0;
trainBlockDuration := 600.0;

var trainingSign := -1.0;  '<0 trains to leak, >0 trains to instability
var trainingGains%[] := {5.0, 10.0, 15.0};
nTrainingBlocks% := Round(Len(trainingGains%[]));

' Compute number of sequencer steps for GAP1, GAP2, and GAP3 in the sequencer file
var gapSeqSteps%, halfgapSeqSteps, gap1SeqSteps, gap2SeqSteps, gap3SeqSteps;  'Initialize sequencer file variables
CalculateGapSeqSteps();

var testSeqSteps%, trainSeqSteps%;
CalculateTestSeqSteps();
CalculateTrainSeqSteps();

' Initial block list generated from default parameter values
var trainLastBlockNum%;
GenerateBlockList(nTestingBlocks%, nTrainingBlocks%);

ToolbarStartup();


'--------------------------------------------------------------------------------
' PROTOCOL-SPECIFIC TOOLBAR FUNCTIONS
'--------------------------------------------------------------------------------
' Updates the window with additional protocol-specific modifications
Proc WindowUpdate()
    var bestScaleCh;
    hepos_vch% := VirtualChan(0, "", 0, 0.001);
    if bestChannel% = 0 then
        hepos_expression$ := Str$(scaleCh1)+"*ch("+Str$(hepos1_ch%)+")";
        bestScaleCh := scaleCh1;
    else
        hepos_expression$ := Str$(scaleCh2)+"*ch("+Str$(hepos2_ch%)+")";
        bestScaleCh := scaleCh2;
    endif;
    VirtualChan(hepos_vch%, hepos_expression$, 0, 1.0/sampleRate);
    ChanProcessAdd(hepos_vch%, 1, 0.05); 
    if Abs(bestScaleCh) > 1 then
        ChanUnits$(hepos_vch%, "deg");
    else
        ChanUnits$(hepos_vch%, "V");
    endif;
    ChanTitle$(hepos_vch%, "hepos"); 
    ChanComment$(hepos_vch%, "Smoothed eye position trace of chosen best hepos channel");
    nullCursorNum% := HCursorNew(hepos_vch%, 0);
    HCursorNew(htvel_ch%, 0);
    ChanShow(-1);
    ChanHide("12..15", "v1", "v2");  'Hide channels not used
End

' Initializes and enables our toolbar functions
Proc ToolbarStartup()
    const initialDisabled%[] := {5, 6, 40};
    ToolbarClear();
    ToolbarSet(0, "Idle", ToolbarIdle%);
    ToolbarSet(1, "Quit", ToolbarQuit%);
    ToolbarSet(2, "New File", ToolbarNewFile%);
    ToolbarSet(3, "File Comments", ToolbarFileComments%);
    ToolbarSet(4, "Expmt Settings", ToolbarExpmtSettings%);
    ToolbarSet(5, "Train Settings", ToolbarTrainingSettings%);
    ToolbarSet(6, "Calc Eye Sign", ToolbarCalcEyeSign%);
    ToolbarSet(40, "Run Expmt", ToolbarRunExpmt%);
    ToolbarEnable(initialDisabled%, 0); 
    Toolbar("", 231);
End

' Settings window for modifying general experimental parameters
Func ToolbarTrainingSettings%()
    var width% := 48;
    DlgCreate("TRAINING SETTINGS", 0, 0, width%, 8);  'Initialize new dialog window

    var col1box% := 33;
    DlgText("Training type:", 3, 1);
    DlgList(1, 15, "Leak|Instability", 9, col1box%-3, 1);
    DlgText("Null Position type:", 3, 2);
    DlgList(2, 15, "Median|Quantile Mean", 9, col1box%-3, 2);
    DlgText("Null Exclusion Range (deg):", 3, 3);
    DlgReal(3, 12, 0.001, 10000.0, col1box%-3, 3, 0);
    DlgText("ScaleCh1:", 3, 4);
    DlgReal(4, 12, -10000.0, 10000.0, col1box%-3, 4, 0);
    DlgText("ScaleCh2:", 3, 5);
    DlgReal(5, 12, -10000.0, 10000.0, col1box%-3, 5, 0);
    DlgText("Best channel:", 3, 6);
    DlgList(6, 15, "hepos1|hepos2", 9, col1box%-3, 6);

    DlgAllow(0x3ff, ToolbarIdle%);  'Allow all, no idle, update settings function
    DlgShow(trainingType%, nullEyePosType%, nullExclusion, scaleCh1, scaleCh2, bestChannel%);

    ' Update gain sign
    if trainingType% = 1 then
        trainingSign := 1.0;
    else
        trainingSign := -1.0;
    endif;

    ' Update "hepos" channel (v3) with provided scalings
    UpdateHeposNull();

    ' Send new variable values to the sequencer
    SetSequencerValues();
    return 1;
End


'--------------------------------------------------------------------------------
' PROTOCOL-SPECIFIC NON-TOOLBAR FUNCTIONS
'--------------------------------------------------------------------------------
Func AddTextMark(samplekey$, blocknumber%)
    ' Search Index "Marker codes, Colour for" for more info on marker code colors
    var text$, code%;
    if trainBlockNum% < Len(trainingGains%[]) then
        trainingGain := trainingSign * trainingGains%[trainBlockNum%];
    endif;
    docase
        case samplekey$ = "G" then
            text$ := "GAP";
            code% := 1;
        case samplekey$ = "P" then
            if blockNum% <= preLastBlockNum% then
                pretestBlockNum% := pretestBlockNum% + 1;
                text$ := "PRE#"+Str$(pretestBlockNum%);
                code% := 2;
                fileComments$[2] := fileComments$[2] + "PRE,";
            else
                posttestBlockNum% := posttestBlockNum% + 1;
                text$ := "POST#"+Str$(posttestBlockNum%);
                code% := 8;
                fileComments$[2] := fileComments$[2] + "POST,";
            endif;
            fileComments$[4] := fileComments$[4] + "(nan,nan),";
        case samplekey$ = "T" then
            trainBlockNum% := trainBlockNum% + 1;
            text$ := "TRAIN#"+Str$(trainBlockNum%)+" (g="+Str$(trainingGain)+", "+"null="+Str$(nullEyePos)+", "+"excl="+Str$(nullExclusion)+")";
            code% := 4;
            fileComments$[2] := fileComments$[2] + "TRAIN,";
            fileComments$[4] := fileComments$[4] + Print$("(%.6f,%.6f),",nullEyePos,nullExclusion);
    endcase;
    return SampleText(text$, -1, code%); 
End

' COMPUTE NUMBER OF SEQUENCER STEPS FOR GAP1, GAP2, GAP3 IN SEQUENCER FILE
Proc CalculateGapSeqSteps()
    gapSeqSteps% := Round(gapDur * sampleRate - 2);
End

Proc CalculateTestSeqSteps()
    testSeqSteps% := Round(testBlockDuration * sampleRate - 3);
End

Proc CalculateTrainSeqSteps()
    trainSeqSteps% := Round((trainBlockDuration * sampleRate / 2.0) - 4);
End

'Generates list of SampleKey pairs for each block of the protocol
'm%  Number of pre/post test blocks.
'n%  Number of training blocks.
Proc GenerateBlockList(m%, n%)
    var i%, trainArrLen%;
    var preSampleKeys$[]   := {"Gg", "Pp"};
    var trainSampleKeys$[] := {"Gg", "Tt"};
    var postSampleKeys$[]  := {"Gg", "Pp"};
    var preArrLen%         := Round(m% * Len(preSampleKeys$[]));
    var postArrLen%        := Round(m% * Len(postSampleKeys$[]));
    if testAfterEveryTrain% = 1 then
        trainArrLen% := Round(n% * (Len(trainSampleKeys$[])+2)) - 2;
    else
        trainArrLen% := Round(n% * Len(trainSampleKeys$[]));
    endif;

    ' Compute total number of blocks for during training section and for the entire experiment
    var experimentTotalListLen% := Round(preArrLen% + trainArrLen% + postArrLen%);
    preLastBlockNum% := Round(preArrLen%);
    trainLastBlockNum% := Round(preArrLen% + trainArrLen%);
    
    ' Resize blockList$[] array to the required size
    resize blockList$[experimentTotalListLen%]; 

    ' Reset all elements of the block list to empty string values
    for i% := 0 to experimentTotalListLen%-1 do
        blockList$[i%] := "";
    next;

    ' Populate array with SampleKey pairs corresponding to each block
    for i% := 0 to experimentTotalListLen%-1 step 2 do
        blockList$[i%] := "Gg";
        if (i% < preLastBlockNum%-1) or (i% > trainLastBlockNum%-1) then
            blockList$[i%+1] := "Pp";
        else
            if (testAfterEveryTrain% = 1) and ((i%-preArrLen%-2) mod 4 = 0) then
                blockList$[i%+1] := "Pp";
            else
                blockList$[i%+1] := "Tt";
            endif;
        endif;
    next;

    ' Update nBlocks% with current number of total blocks
    nBlocks% := Len(blockList$[]);
    PrintLog("\nBlock list generated:  ", blockList$[]);
    
    ' Provide estimate of experiment run time
    var totalTestDuration := (2.0 * m% * (gapDur+testBlockDuration)) / 60.0;
    var totalTrainDuration := (1.0 * n% * (gapDur+trainBlockDuration)) / 60.0;
    if testAfterEveryTrain% = 1 then
        totalTrainDuration := totalTrainDuration + (1.0 * n% * (gapDur+testBlockDuration) / 60.0);
    endif;
    var totalExpmtDuration := totalTestDuration + totalTrainDuration;
    PrintLog("Total Estimated Experiment Duration: %.3f min\n", totalExpmtDuration);

    ' Do a final check to make sure there are no consecutive duplicates
    for i% := 0 to experimentTotalListLen%-2 do
        if blockList$[i%] = blockList$[i%+1] then
            Message("[ERROR] Duplicate blocks found between elements %d and %d!", i%, i%+1);
            halt
        endif;
    next;
End

Proc SendDrumCommand()
    prevCommandTime := MaxTime() - sampleStepsize;
    commandVelocity := trainingGain * (ChanValue(hepos_vch%, prevCommandTime) - nullEyePos); 
    var absComVel := Abs(commandVelocity);
    docase
        case absComVel >= velocityGainMax then
            ' If absComVel exceeds velocityGainMax, then do not update velocity
            if (blockNum% >= preLastBlockNum%) and (blockNum% < trainLastBlockNum%) then blockNum% := trainLastBlockNum%; endif;
            PrintLog("Maximum command velocity (%.1f deg/s) exceeded: %.3f deg/s\n", velocityGainMax, commandVelocity);
        case absComVel <= nullExclusion then
            ' If absComVel exceeds nullExclusion, then send a 0 velocity command
            SampleSeqVar(9, Amp2Int32%(0, drumVelocity2Voltage));
        else
            ' Otherwise, update drum velocity command
            SampleSeqVar(9, Amp2Int32%(commandVelocity, drumVelocity2Voltage));
    endcase;
End

' SEND CURRENT SPIKE2 VARIABLE VALUES TO SEQUENCER
Proc SetSequencerValues()
    var degPerMS% := (sinFreq * 360) / sampleRate;
    var shiftPhaseAngle := 2.0 * degPerMS%;

    ' Gap block parameters
    SampleSeqVar(6, gapSeqSteps%);
    SampleSeqVar(7, testSeqSteps%);
    SampleSeqVar(8, trainSeqSteps%);

    ' Drum parameters
    SampleSeqVar(10, Amp2Int16%(sinAmp, drumVelocity2Voltage));              'DrumAmp
    SampleSeqVar(11, Amp2Int32%(drumVelocityOffset, drumVelocity2Voltage));  'DrumOff

    ' Chair parameters
    SampleSeqVar(12, Amp2Int16%(sinAmp, chairVelocity2Voltage));               'ChairAmp
    SampleSeqVar(13, Amp2Int32%(chairVelocityOffset, chairVelocity2Voltage));  'ChairOff

    ' Sinusoidal stimulus parameters
    'PrintLog("Vel Amp: %.4f deg/s | Pos Amp: %.4f deg\n", sinAmp, sinAmp/(3.1415926535*sinFreq));
    SampleSeqVar(14, Hz2Int32%(sinFreq));
    SampleSeqVar(15, Angle2Int32%(sinPhase-shiftPhaseAngle));
    SampleSeqVar(16, Angle2Int32%(shiftPhaseAngle));
End